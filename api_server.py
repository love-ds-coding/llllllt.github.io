#!/usr/bin/env python3
"""
Minimal Local API Server for Voice Notes
- Accepts audio files or text input
- Returns transcript (Whisper) and summary (Ollama) 
- Exposes download/view links
- Desktop/laptop only, localhost only
"""

from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import os
import uuid
import json
from datetime import datetime
import base64

app = Flask(__name__)

# Allow CORS for the hosted origin (your HTML file)
CORS(app, origins=["http://localhost:*", "file://*", "http://127.0.0.1:*"])

# Simple in-memory storage (replace with file/database in production)
STORAGE_DIR = "voice_notes_storage"
os.makedirs(STORAGE_DIR, exist_ok=True)

# Mock data storage
notes_db = {}

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

@app.route('/api/process-audio', methods=['POST'])
def process_audio():
    """Process audio file and return transcript + summary"""
    try:
        # Get audio file from request
        if 'audio' not in request.files:
            return jsonify({"error": "No audio file provided"}), 400
        
        audio_file = request.files['audio']
        if audio_file.filename == '':
            return jsonify({"error": "No audio file selected"}), 400
        
        # Generate unique ID for this note
        note_id = str(uuid.uuid4())
        
        # Save audio file (in production, you'd process with Whisper here)
        audio_path = os.path.join(STORAGE_DIR, f"{note_id}.wav")
        audio_file.save(audio_path)
        
        # Mock transcript (replace with actual Whisper API call)
        mock_transcript = "This is a mock transcript of the audio recording. In production, this would be generated by OpenAI's Whisper API or similar speech-to-text service."
        
        # Mock summary (replace with actual Ollama API call)
        mock_summary = "Mock summary: User recorded a voice note about project requirements and timeline."
        
        # Create note record
        note_data = {
            "id": note_id,
            "timestamp": datetime.now().isoformat(),
            "type": "audio",
            "audio_path": audio_path,
            "transcript": mock_transcript,
            "summary": mock_summary,
            "duration": "00:00:15",  # Mock duration
            "file_size": os.path.getsize(audio_path)
        }
        
        # Store in memory (replace with persistent storage)
        notes_db[note_id] = note_data
        
        return jsonify({
            "success": True,
            "note_id": note_id,
            "transcript": mock_transcript,
            "summary": mock_summary,
            "download_links": {
                "audio": f"/api/download/{note_id}/audio",
                "transcript": f"/api/download/{note_id}/transcript",
                "summary": f"/api/download/{note_id}/summary"
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/process-text', methods=['POST'])
def process_text():
    """Process text input and return summary"""
    try:
        data = request.get_json()
        if not data or 'text' not in data:
            return jsonify({"error": "No text provided"}), 400
        
        text = data['text']
        note_id = str(uuid.uuid4())
        
        # Mock summary (replace with actual Ollama API call)
        mock_summary = f"Mock summary of text input: {text[:50]}{'...' if len(text) > 50 else ''}"
        
        # Create note record
        note_data = {
            "id": note_id,
            "timestamp": datetime.now().isoformat(),
            "type": "text",
            "text": text,
            "summary": mock_summary,
            "word_count": len(text.split())
        }
        
        # Store in memory
        notes_db[note_id] = note_data
        
        return jsonify({
            "success": True,
            "note_id": note_id,
            "summary": mock_summary,
            "download_links": {
                "text": f"/api/download/{note_id}/text",
                "summary": f"/api/download/{note_id}/summary"
            }
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/download/<note_id>/<file_type>', methods=['GET'])
def download_file(note_id, file_type):
    """Download various file types for a note"""
    if note_id not in notes_db:
        return jsonify({"error": "Note not found"}), 404
    
    note = notes_db[note_id]
    
    try:
        if file_type == "audio" and note["type"] == "audio":
            return send_file(note["audio_path"], as_attachment=True)
        
        elif file_type == "transcript" and note["type"] == "audio":
            transcript_content = note["transcript"]
            return transcript_content, 200, {"Content-Type": "text/plain"}
        
        elif file_type == "summary":
            summary_content = note["summary"]
            return summary_content, 200, {"Content-Type": "text/plain"}
        
        elif file_type == "text" and note["type"] == "text":
            text_content = note["text"]
            return text_content, 200, {"Content-Type": "text/plain"}
        
        else:
            return jsonify({"error": "Invalid file type"}), 400
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/notes', methods=['GET'])
def list_notes():
    """List all notes"""
    return jsonify({
        "notes": list(notes_db.values()),
        "count": len(notes_db)
    })

@app.route('/api/notes/<note_id>', methods=['GET'])
def get_note(note_id):
    """Get specific note details"""
    if note_id not in notes_db:
        return jsonify({"error": "Note not found"}), 404
    
    return jsonify(notes_db[note_id])

@app.route('/api/notes/<note_id>', methods=['DELETE'])
def delete_note(note_id):
    """Delete a note"""
    if note_id not in notes_db:
        return jsonify({"error": "Note not found"}), 404
    
    note = notes_db[note_id]
    
    # Remove audio file if it exists
    if note["type"] == "audio" and os.path.exists(note["audio_path"]):
        os.remove(note["audio_path"])
    
    # Remove from memory
    del notes_db[note_id]
    
    return jsonify({"success": True, "message": "Note deleted"})

if __name__ == '__main__':
    print("üöÄ Starting Voice Notes API Server...")
    print("üìç Server will run on: http://localhost:5000")
    print("üîß Health check: http://localhost:5000/health")
    print("üìù API endpoints:")
    print("   POST /api/process-audio - Process audio files")
    print("   POST /api/process-text - Process text input")
    print("   GET  /api/notes - List all notes")
    print("   GET  /api/download/<id>/<type> - Download files")
    print("\n‚ö†Ô∏è  This is a mock server - replace Whisper/Ollama calls with real APIs")
    
    app.run(host='localhost', port=5000, debug=True)

